CREATE DATABASE minProj;


CREATE TABLE customers (
    custID VARCHAR(20) PRIMARY KEY NOT NULL,
    firstname VARCHAR(20) NOT NULL,
    lastname VARCHAR(20) NOT NULL,
    address VARCHAR(255),
    city VARCHAR(20),
    state VARCHAR(20),
    pinCode VARCHAR(6),
    pno VARCHAR(10) NOT NULL UNIQUE,
    email VARCHAR(40) NOT NULL UNIQUE,
    pwd VARCHAR(14) NOT NULL,
    joinDate date NOT NULL,
    paymentID INT,
    cartID VARCHAR(20) NOT NULL;
    FOREIGN KEY (paymentdetailID) REFERENCES paymentdet(paymentdetailID),
    FOREIGN KEY (cartID) REFERENCES cartDetails(cartID)
);

CREATE TABLE category (
    categoryID INT PRIMARY NOT NULL,
    categoryName VARCHAR(50) NOT NULL
);


CREATE TABLE products (
    prodID VARCHAR(50) PRIMARY KEY NOT NULL,
    prodName VARCHAR(255) NOT NULL,
    prodDesc TEXT NOT NULL,
    minPrice INT NOT NULL,
    img TEXT NOT NULL,
    rating INT,
    unitStock INT NOT NULL,
    categoryID INT,
    prodAvail bool NOT NULL,
    FOREIGN KEY (categoryID) REFERENCES category(categoryID)
);

CREATE TABLE suppliers (
    supplierID VARCHAR(20) PRIMARY KEY NOT NULL,
    orgname VARCHAR(50) NOT NULL,
    firstname VARCHAR(20) NOT NULL,
    lastname VARCHAR(20) NOT NULL,
    address VARCHAR(255),
    city VARCHAR(20),
    state VARCHAR(20),
    pinCode VARCHAR(6),
    pno VARCHAR(10) NOT NULL,
    email VARCHAR(40) NOT NULL,
    pwd VARCHAR(14) NOT NULL,
    joinDate date NOT NULL,
    paymentID INT,
    FOREIGN KEY (paymentdetailID) REFERENCES paymentdet(paymentdetailID),
);


CREATE TABLE supplierdet (
    supplierID VARCHAR(20) NOT NULL,
    prodID VARCHAR(50) NOT NULL,
    sellprice INT NOT NULL,
    PRIMARY KEY(supplierID, prodID),
    FOREIGN KEY (supplierID) REFERENCES suppliers(supplierID),
    FOREIGN KEY (prodID) REFERENCES products(prodID)
);



delimiter //
CREATE TRIGGER minPriceUpdate 
AFTER INSERT 
ON supplierdet FOR EACH ROW
begin
    declare pID varchar(50);
    declare mP int;
    SET pID = new.prodID;
    SELECT minPrice INTO mP FROM products WHERE products.prodID = pID;
    if (mP > new.sellprice) then
        SET mP = new.sellprice;
    end if;
    UPDATE products SET minPrice = mP WHERE prodId = pID;
end //
delimiter ;


delimiter //
CREATE TRIGGER stockCountUpdate 
AFTER INSERT 
ON supplierdet FOR EACH ROW
begin
    declare pID varchar(50);
    declare currStock int;
    SET pID = new.prodID;
    SELECT unitStock INTO currStock from products WHERE prodID = pID;
    SET currStock = currStock + new.stock;
    UPDATE products SET unitStock = currStock WHERE prodID = pID;
end //
delimiter ;

DROP TRIGGER IF EXISTS cardSubtotalUpdateOnAdd;

delimiter // 
CREATE TRIGGER cardSubtotalUpdateOnAdd
AFTER INSERT 
ON cart FOR EACH ROW 
begin 
    declare subt int;

    SELECT SUM(minPrice * quantity) INTO subt from products NATURAL JOIN cart WHERE cartID = new.cartID;
    IF (subt IS NULL) THEN 
        UPDATE cartDetails SET subtotal = 0 WHERE cartID = new.cartID;
    ELSE 
        UPDATE cartDetails SET subtotal = subt WHERE cartID = new.cartID;
    END IF;
end //


DROP TRIGGER IF EXISTS cardSubtotalUpdateOnRemove;

delimiter // 
CREATE TRIGGER cardSubtotalUpdateOnRemove
AFTER DELETE 
ON cart FOR EACH ROW 
begin 
    declare subt int;

    SELECT SUM(minPrice * quantity) INTO subt from products NATURAL JOIN cart WHERE cartID = old.cartID;
    IF (subt IS NULL) THEN 
        UPDATE cartDetails SET subtotal = 0 WHERE cartID = old.cartID;
    ELSE 
        UPDATE cartDetails SET subtotal = subt WHERE cartID = old.cartID;
    END IF;
end //
delimiter ;


DROP TRIGGER IF EXISTS cartSubtotalUpdateOnUpdateQuantity;

delimiter //
CREATE TRIGGER cartSubtotalUpdateOnUpdateQuantity
AFTER UPDATE
ON cart FOR EACH ROW
begin
	declare subt int;
    IF (old.quantity <> new.quantity) then
        SELECT SUM(minPrice * quantity) INTO subt from products NATURAL JOIN cart WHERE cartID = new.cartID;
        IF (subt IS NULL) THEN 
            UPDATE cartDetails SET subtotal = 0 WHERE cartID = new.cartID;
        ELSE 
            UPDATE cartDetails SET subtotal = subt WHERE cartID = new.cartID;
        END IF;
    END IF;

end //
delimiter ;







CREATE TABLE cartDetails (
    cartID VARCHAR(20) PRIMARY KEY NOT NULL,
    subtotal INT default 0
);


CREATE TABLE cart(
    cartID VARCHAR(20) NOT NULL ,
    prodID VARCHAR(50) NOT NULL ,
    PRIMARY KEY(cartID, prodID),
    quantity INT default 1,
    FOREIGN KEY (prodID) REFERENCES products(prodID),
    FOREIGN KEY (cartID) REFERENCES cartDetails(cartID)
);